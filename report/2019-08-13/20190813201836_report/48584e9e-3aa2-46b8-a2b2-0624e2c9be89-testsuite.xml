<ns0:test-suite xmlns:ns0="urn:model.allure.qatools.yandex.ru" start="1565698716620" stop="1565698909068">
  <name>test_script</name>
  <labels/>
  <test-cases>
    <test-case start="1565698716620" status="failed" stop="1565698764919">
      <name>test_Balance_payment.test_balance_payment</name>
      <failure>
        <message>ValueError: could not convert string to float: </message>
        <stack-trace>setup_module = None

    def test_balance_payment(setup_module):
        try:
            enter_workbench.workbench_payment() #输入手机号码，
            enter_workbench.Balance_payment_click()  # 支付方式按钮：余额支付
            enter_workbench.input_oilgunNo(enter_workbench.get_diesegunNo())  # 输入汽油枪号
            # 加油前-获取汽油余额和通用余额
            before_dieselBalance, before_commonlBalance = enter_workbench.workbench_inputPhone()[0::2]
            if float(before_dieselBalance)&gt;0:
                oilPrice=round((float(before_dieselBalance)/8)*100/100.0,2) #取加油金额=汽油余额的1/4
            elif float(before_commonlBalance)&gt;0:
                oilPrice = round((float(before_commonlBalance)/8)*100/100.0,2)  # 取加油金额=通用余额的1/4
    
                # oilPrice=0.1
                enter_workbench.input_oilPrice(oilPrice)  #输入加油金额
                enter_workbench.clear_coupon()
                # 获取提交订单时计算的实收金额
                receivepayment=enter_workbench.get_receivepayment()
                print('实收金额:',receivepayment)
                # 获取提交订单时计算的优惠金额
                discount = enter_workbench.get_discount()
                print('提交订单时计算的优惠金额', discount)
                # PageAction.capture_screen()
                # 收款操作
                PageAction.roll_bottom()
                enter_workbench.click_pay()
                if PageAction.assert_word('余额支付成功') ==True:
                    enter_workbench.close_success_pay_Popup()
                    #断言部分： map(lambda x :float(x) ,L)
                    Balance_list=enter_workbench.workbench_inputPhone()  #返回list包含 会员各种类型的余额文本
                    print('Balance_list',Balance_list)
                    after_dieselBalance, after_gaslBalance, after_commonlBalance = map(lambda x:float(x),Balance_list) #金额文本转成浮点金额
                    except_remain_Balance = round((((float(before_dieselBalance) -oilPrice ) * 100) / 100.0),2)  # 预期剩余汽油余额
                    print('原汽油余额:%s,应收金额:%s,预期剩余汽油金额:%s' % (before_dieselBalance, receivepayment, except_remain_Balance))
                    # 断言会员余额加油前后变化
                    if not except_remain_Balance == after_dieselBalance:
                        PageAction.capture_error_screen()
                        error('实际剩余汽油余额: %s 跟预期剩余汽油余额: %s不一致'%(after_dieselBalance,except_remain_Balance,))
                    enter_workbench.close_payment_windows()
                    payed = enter_workbench.get_order_realpay()
                    print('订单记录的实收金额：', payed)
                    if not receivepayment == payed :
                        PageAction.capture_error_screen()
                        error('订单记录的实收金额:%s与付款实付金额:%s不一致'%(payed,receivepayment))
                    order_discount = enter_workbench.get_order_discount()
                    print('订单记录的优惠金额：', order_discount)
                    if not order_discount == discount:
                        PageAction.capture_error_screen()
                        error('订单的优惠金额:%s与付款优惠金额:%s不一致' %(order_discount,discount))
                else:
                    PageAction.assert_word('余额支付失败')
                    print('余额支付失败')
                    enter_workbench.close_fail_pay_Popup()
                    enter_workbench.close_payment_windows()
                    error('余额支付失败')
            else:
                print('通用余额,汽油余额都不足无法进行余额支付')
                PageAction.capture_error_screen()
                error('通用余额,汽油余额都不足无法进行余额支付')
        except Exception as e:
&gt;           raise e

test_Balance_payment.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

setup_module = None

    def test_balance_payment(setup_module):
        try:
            enter_workbench.workbench_payment() #输入手机号码，
            enter_workbench.Balance_payment_click()  # 支付方式按钮：余额支付
            enter_workbench.input_oilgunNo(enter_workbench.get_diesegunNo())  # 输入汽油枪号
            # 加油前-获取汽油余额和通用余额
            before_dieselBalance, before_commonlBalance = enter_workbench.workbench_inputPhone()[0::2]
&gt;           if float(before_dieselBalance)&gt;0:
E           ValueError: could not convert string to float:

test_Balance_payment.py:19: ValueError</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="15392-MainThread"/>
        <label name="host" value="QH-20151025JPNA"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1565698768709" status="failed" stop="1565698831120">
      <name>test_Cash_payment.test_cash_payment</name>
      <failure>
        <message>JYHException: 找不到元素</message>
        <stack-trace>localtion = 'xpath,//input[@placeholder="请输入收款金额"]', seconds = 5

    def getElement(localtion,seconds=None):
        time.sleep(1)
        if isinstance(localtion,str) and ',' in localtion:
            selector_by = localtion.split(',')[0]
            localExpression = localtion.split(',')[1]
            # print(selector_by,localExpression)
            if not seconds:
                seconds =5
            if selector_by=='x' or selector_by== 'xpath':
                localType='xpath'
            elif selector_by=='i' or selector_by== 'id':
                localType='id'
            elif selector_by=='n' or selector_by== 'name':
                localType='name'
            elif selector_by=='t' or selector_by== 'tag name':
                localType='tag name'
            elif selector_by == "l" or selector_by == 'link':
                localType = 'link text'
            elif selector_by == "p" or selector_by == 'partial_link_text':
                localType = 'partial link text'
            elif selector_by == "c" or selector_by == 'css_selector':
                localType='css selector'
            elif selector_by == "c" or selector_by == 'class_name':
                localType = 'class selector'
            else:
                raise NameError("Please enter a valid type of targeting elements.")
        try:
            ele = WebDriverWait(get_selenium(), seconds).until(
&gt;           lambda x: x.find_element(by=localType, value=localExpression))

..\..\untils\find.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.support.wait.WebDriverWait (session="28012d5347598f4e8dd3aa23495387ff")&gt;
method = &lt;function getElement.&lt;locals&gt;.&lt;lambda&gt; at 0x0000000004CBEC80&gt;
message = ''

    def until(self, method, message=''):
        """Calls the method provided with the driver as an argument until the \
        return value is not False."""
        screen = None
        stacktrace = None
    
        end_time = time.time() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, 'screen', None)
                stacktrace = getattr(exc, 'stacktrace', None)
            time.sleep(self._poll)
            if time.time() &gt; end_time:
                break
&gt;       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message:

C:\Python36\lib\site-packages\selenium\webdriver\support\wait.py:80: TimeoutException

During handling of the above exception, another exception occurred:

setup_module = None

    def test_cash_payment(setup_module):
        enter_workbench.workbench_payment()  # 输入手机号码，
        enter_workbench.workbench_inputPhone()
        enter_workbench.input_oilgunNo(enter_workbench.get_diesegunNo())
        oilPrice=round(random.random()*100,2) #加油金额随机数字，保留2个小数位
        enter_workbench.input_oilPrice(oilPrice) #输入加油金额
        enter_workbench.clear_coupon()
        # 获取提交订单时计算的实收金额
        receivepayment = enter_workbench.get_receivepayment()
        print('实收金额:', receivepayment)
        # 获取提交订单时计算的优惠金额
        discount = enter_workbench.get_discount()
        print('提交订单时计算的优惠金额', discount)
        # enter_workbench.input_cash_receipt()
&gt;       Amount_Collected=enter_workbench.get_cash_receipt()

test_Cash_payment.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\..\Action\enter_workbench.py:172: in get_cash_receipt
    Manual_input_cash=PageAction.getelement_attribute(read_file.get_option('workbench','Manual_input_cash'),attr='value')
..\..\untils\PageAction.py:24: in getelement_attribute
    raise e
..\..\untils\PageAction.py:21: in getelement_attribute
    attr_value=find.getElement(localtion).get_attribute(attr)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

localtion = 'xpath,//input[@placeholder="请输入收款金额"]', seconds = 5

    def getElement(localtion,seconds=None):
        time.sleep(1)
        if isinstance(localtion,str) and ',' in localtion:
            selector_by = localtion.split(',')[0]
            localExpression = localtion.split(',')[1]
            # print(selector_by,localExpression)
            if not seconds:
                seconds =5
            if selector_by=='x' or selector_by== 'xpath':
                localType='xpath'
            elif selector_by=='i' or selector_by== 'id':
                localType='id'
            elif selector_by=='n' or selector_by== 'name':
                localType='name'
            elif selector_by=='t' or selector_by== 'tag name':
                localType='tag name'
            elif selector_by == "l" or selector_by == 'link':
                localType = 'link text'
            elif selector_by == "p" or selector_by == 'partial_link_text':
                localType = 'partial link text'
            elif selector_by == "c" or selector_by == 'css_selector':
                localType='css selector'
            elif selector_by == "c" or selector_by == 'class_name':
                localType = 'class selector'
            else:
                raise NameError("Please enter a valid type of targeting elements.")
        try:
            ele = WebDriverWait(get_selenium(), seconds).until(
            lambda x: x.find_element(by=localType, value=localExpression))
            return ele
        except Exception as e:
&gt;           raise PageAction.JYHException("找不到元素")
E           untils.PageAction.JYHException: 找不到元素

..\..\untils\find.py:56: JYHException</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="15392-MainThread"/>
        <label name="host" value="QH-20151025JPNA"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1565698834880" status="failed" stop="1565698909068">
      <name>test_Insufficient_balance_payment.test_Balance_payment</name>
      <failure>
        <message>JYHException: 找不到元素</message>
        <stack-trace>localtion = 'xpath,//span[@class="ant-modal-close-x"]/i/*[name()="svg"]/*[name()="path"]'
seconds = 5

    def getElement(localtion,seconds=None):
        time.sleep(1)
        if isinstance(localtion,str) and ',' in localtion:
            selector_by = localtion.split(',')[0]
            localExpression = localtion.split(',')[1]
            # print(selector_by,localExpression)
            if not seconds:
                seconds =5
            if selector_by=='x' or selector_by== 'xpath':
                localType='xpath'
            elif selector_by=='i' or selector_by== 'id':
                localType='id'
            elif selector_by=='n' or selector_by== 'name':
                localType='name'
            elif selector_by=='t' or selector_by== 'tag name':
                localType='tag name'
            elif selector_by == "l" or selector_by == 'link':
                localType = 'link text'
            elif selector_by == "p" or selector_by == 'partial_link_text':
                localType = 'partial link text'
            elif selector_by == "c" or selector_by == 'css_selector':
                localType='css selector'
            elif selector_by == "c" or selector_by == 'class_name':
                localType = 'class selector'
            else:
                raise NameError("Please enter a valid type of targeting elements.")
        try:
            ele = WebDriverWait(get_selenium(), seconds).until(
&gt;           lambda x: x.find_element(by=localType, value=localExpression))

..\..\untils\find.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.support.wait.WebDriverWait (session="c0eb921c0ae3c5b1d436aeef031662db")&gt;
method = &lt;function getElement.&lt;locals&gt;.&lt;lambda&gt; at 0x0000000004CD9F28&gt;
message = ''

    def until(self, method, message=''):
        """Calls the method provided with the driver as an argument until the \
        return value is not False."""
        screen = None
        stacktrace = None
    
        end_time = time.time() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, 'screen', None)
                stacktrace = getattr(exc, 'stacktrace', None)
            time.sleep(self._poll)
            if time.time() &gt; end_time:
                break
&gt;       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message:

C:\Python36\lib\site-packages\selenium\webdriver\support\wait.py:80: TimeoutException

During handling of the above exception, another exception occurred:

setup_module = None

    def test_Balance_payment(setup_module):
        enter_workbench.workbench_payment() #输入手机号码，
        enter_workbench.Balance_payment_click()  # 支付方式按钮：余额支付
        enter_workbench.input_oilgunNo(enter_workbench.get_diesegunNo())  # 输入汽油枪号
        #[0::2]--&gt;取奇数位包含列表末位，[0:-1:2]--&gt;取奇数位不包含末位
        before_dieselBalance,before_commonlBalance=enter_workbench.workbench_inputPhone()[0::2] #加油前-获取汽油余额+通用余额
        if not (before_dieselBalance and before_commonlBalance):
            oilPrice=random.randint(2,10)
        else:
            oilPrice=float(before_dieselBalance)+float(before_commonlBalance)+1 #加油金额&gt;余额
        enter_workbench.input_oilPrice(oilPrice)  #输入加油金额
        enter_workbench.clear_coupon()
        # 获取提交订单时计算的实收金额
        receivepayment=enter_workbench.get_receivepayment()
        print('实收金额:',receivepayment)
        # 获取提交订单时计算的优惠金额
        discount = enter_workbench.get_discount()
        print('提交订单时计算的优惠金额', discount)
        PageAction.capture_screen()
        # 收款操作
        PageAction.roll_bottom()
        enter_workbench.click_pay()
        if PageAction.assert_word('余额支付失败'):
            print('余额不足支付失败，与预期一致')
            enter_workbench.close_fail_pay_Popup()
            enter_workbench.close_payment_windows()
        else:
            PageAction.assert_word('余额支付成功')
&gt;           enter_workbench.close_payment_windows()

test_Insufficient_balance_payment.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\..\Action\enter_workbench.py:96: in close_payment_windows
    PageAction.click_SvgelementXpath(read_file.get_option('workbench', 'close_pay'))
..\..\untils\PageAction.py:73: in click_SvgelementXpath
    raise e
..\..\untils\PageAction.py:69: in click_SvgelementXpath
    Svgelement=find.getElement(localtion)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

localtion = 'xpath,//span[@class="ant-modal-close-x"]/i/*[name()="svg"]/*[name()="path"]'
seconds = 5

    def getElement(localtion,seconds=None):
        time.sleep(1)
        if isinstance(localtion,str) and ',' in localtion:
            selector_by = localtion.split(',')[0]
            localExpression = localtion.split(',')[1]
            # print(selector_by,localExpression)
            if not seconds:
                seconds =5
            if selector_by=='x' or selector_by== 'xpath':
                localType='xpath'
            elif selector_by=='i' or selector_by== 'id':
                localType='id'
            elif selector_by=='n' or selector_by== 'name':
                localType='name'
            elif selector_by=='t' or selector_by== 'tag name':
                localType='tag name'
            elif selector_by == "l" or selector_by == 'link':
                localType = 'link text'
            elif selector_by == "p" or selector_by == 'partial_link_text':
                localType = 'partial link text'
            elif selector_by == "c" or selector_by == 'css_selector':
                localType='css selector'
            elif selector_by == "c" or selector_by == 'class_name':
                localType = 'class selector'
            else:
                raise NameError("Please enter a valid type of targeting elements.")
        try:
            ele = WebDriverWait(get_selenium(), seconds).until(
            lambda x: x.find_element(by=localType, value=localExpression))
            return ele
        except Exception as e:
&gt;           raise PageAction.JYHException("找不到元素")
E           untils.PageAction.JYHException: 找不到元素

..\..\untils\find.py:56: JYHException</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="15392-MainThread"/>
        <label name="host" value="QH-20151025JPNA"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
  </test-cases>
</ns0:test-suite>
