<ns0:test-suite xmlns:ns0="urn:model.allure.qatools.yandex.ru" start="1567937346953" stop="1567937355697">
  <name>workbenck</name>
  <labels/>
  <test-cases>
    <test-case start="1567937346953" status="broken" stop="1567937355697">
      <name>test_Insufficient_balance_payment.test_Insufficient_balance_payment</name>
      <failure>
        <message>JYHException: 找不到元素</message>
        <stack-trace>localtion = 'id,userName', seconds = 5

    def getElement(localtion,seconds=None):
        time.sleep(1)
        if isinstance(localtion,str) and ',' in localtion:
            selector_by = localtion.split(',')[0]
            localExpression = localtion.split(',')[1]
            # print(selector_by,localExpression)
            if not seconds:
                seconds =5
            if selector_by=='x' or selector_by== 'xpath':
                localType='xpath'
            elif selector_by=='i' or selector_by== 'id':
                localType='id'
            elif selector_by=='n' or selector_by== 'name':
                localType='name'
            elif selector_by=='t' or selector_by== 'tag name':
                localType='tag name'
            elif selector_by == "l" or selector_by == 'link':
                localType = 'link text'
            elif selector_by == "p" or selector_by == 'partial_link_text':
                localType = 'partial link text'
            elif selector_by == "c" or selector_by == 'css_selector':
                localType='css selector'
            elif selector_by == "c" or selector_by == 'class_name':
                localType = 'class selector'
            else:
                raise NameError("Please enter a valid type of targeting elements.")
        try:
            ele = WebDriverWait(get_selenium(), seconds).until(
&gt;           lambda x: x.find_element(by=localType, value=localExpression))

..\untils\find.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.support.wait.WebDriverWait (session="2feba8db5218979676d4e525347e7669")&gt;
method = &lt;function getElement.&lt;locals&gt;.&lt;lambda&gt; at 0x0000000004C4FD08&gt;
message = ''

    def until(self, method, message=''):
        """Calls the method provided with the driver as an argument until the \
        return value is not False."""
        screen = None
        stacktrace = None
    
        end_time = time.time() + self._timeout
        while True:
            try:
&gt;               value = method(self._driver)

c:\python36\lib\site-packages\selenium\webdriver\support\wait.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

x = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="2feba8db5218979676d4e525347e7669")&gt;

&gt;   lambda x: x.find_element(by=localType, value=localExpression))

..\untils\find.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="2feba8db5218979676d4e525347e7669")&gt;
by = 'id', value = 'userName'

    def find_element(self, by=By.ID, value=None):
        """
        'Private' method used by the find_element_by_* methods.
    
        :Usage:
            Use the corresponding find_element_by_* instead of this.
    
        :rtype: WebElement
        """
        if self.w3c:
            if by == By.ID:
                by = By.CSS_SELECTOR
                value = '[id="%s"]' % value
            elif by == By.TAG_NAME:
                by = By.CSS_SELECTOR
            elif by == By.CLASS_NAME:
                by = By.CSS_SELECTOR
                value = ".%s" % value
            elif by == By.NAME:
                by = By.CSS_SELECTOR
                value = '[name="%s"]' % value
        return self.execute(Command.FIND_ELEMENT, {
            'using': by,
&gt;           'value': value})['value']

c:\python36\lib\site-packages\selenium\webdriver\remote\webdriver.py:784: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="2feba8db5218979676d4e525347e7669")&gt;
driver_command = 'findElement'
params = {'sessionId': '2feba8db5218979676d4e525347e7669', 'using': 'id', 'value': 'userName'}

    def execute(self, driver_command, params=None):
        """
        Sends a command to be executed by a command.CommandExecutor.
    
        :Args:
         - driver_command: The name of the command to execute as a string.
         - params: A dictionary of named parameters to send with the command.
    
        :Returns:
          The command's JSON response loaded into a dictionary object.
        """
        if self.session_id is not None:
            if not params:
                params = {'sessionId': self.session_id}
            elif 'sessionId' not in params:
                params['sessionId'] = self.session_id
    
        params = self._wrap_value(params)
        response = self.command_executor.execute(driver_command, params)
        if response:
&gt;           self.error_handler.check_response(response)

c:\python36\lib\site-packages\selenium\webdriver\remote\webdriver.py:249: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000000002FF2EF0&gt;
response = {'sessionId': '2feba8db5218979676d4e525347e7669', 'status': 23, 'value': {'message': 'no such window: target window al...\n  (Session info: chrome=48.0.2564.82)\n  (Driver info: chromedriver=2.9.248315,platform=Windows NT 6.1 SP1 x86_64)'}}

    def check_response(self, response):
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            try:
                                message = message['message']
                            except TypeError:
                                message = None
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = WebDriverException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = WebDriverException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException and 'alert' in value:
            raise exception_class(message, screen, stacktrace, value['alert'].get('text'))
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed
E       from unknown error: web view not found
E         (Session info: chrome=48.0.2564.82)
E         (Driver info: chromedriver=2.9.248315,platform=Windows NT 6.1 SP1 x86_64)

c:\python36\lib\site-packages\selenium\webdriver\remote\errorhandler.py:193: NoSuchWindowException

During handling of the above exception, another exception occurred:

    @pytest.fixture(scope="function")
    def setup_module():
        helper.open_browser('chrome')
        helper.open_url()
&gt;       login.login()

..\test_script\workbenck\conftest.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
login.py:18: in login
    PageAction.input_string(read_file.get_option('login','userName'),content=userName)
..\untils\PageAction.py:48: in input_string
    raise e
..\untils\PageAction.py:44: in input_string
    ele_object=find.getElement(localtion)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

localtion = 'id,userName', seconds = 5

    def getElement(localtion,seconds=None):
        time.sleep(1)
        if isinstance(localtion,str) and ',' in localtion:
            selector_by = localtion.split(',')[0]
            localExpression = localtion.split(',')[1]
            # print(selector_by,localExpression)
            if not seconds:
                seconds =5
            if selector_by=='x' or selector_by== 'xpath':
                localType='xpath'
            elif selector_by=='i' or selector_by== 'id':
                localType='id'
            elif selector_by=='n' or selector_by== 'name':
                localType='name'
            elif selector_by=='t' or selector_by== 'tag name':
                localType='tag name'
            elif selector_by == "l" or selector_by == 'link':
                localType = 'link text'
            elif selector_by == "p" or selector_by == 'partial_link_text':
                localType = 'partial link text'
            elif selector_by == "c" or selector_by == 'css_selector':
                localType='css selector'
            elif selector_by == "c" or selector_by == 'class_name':
                localType = 'class selector'
            else:
                raise NameError("Please enter a valid type of targeting elements.")
        try:
            ele = WebDriverWait(get_selenium(), seconds).until(
            lambda x: x.find_element(by=localType, value=localExpression))
            return ele
        except Exception as e:
&gt;           raise PageAction.JYHException("找不到元素")
E           untils.PageAction.JYHException: 找不到元素

..\untils\find.py:56: JYHException</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="story" value="Balance_payment"/>
        <label name="severity" value="normal"/>
        <label name="thread" value="17904-MainThread"/>
        <label name="host" value="QH-20151025JPNA"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
  </test-cases>
</ns0:test-suite>
