{
  "uid" : "20bb883cddfd73c7",
  "name" : "test_Insufficient_balance_payment.test_Insufficient_balance_payment",
  "fullName" : "workbenck.test_Insufficient_balance_payment.test_Insufficient_balance_payment",
  "historyId" : "c97c34390e3e78563592c2299c902f2c",
  "time" : {
    "start" : 1567937346953,
    "stop" : 1567937355697,
    "duration" : 8744
  },
  "description" : "",
  "descriptionHtml" : "",
  "status" : "broken",
  "statusMessage" : "JYHException: 找不到元素",
  "statusTrace" : "localtion = 'id,userName', seconds = 5\n\n    def getElement(localtion,seconds=None):\n        time.sleep(1)\n        if isinstance(localtion,str) and ',' in localtion:\n            selector_by = localtion.split(',')[0]\n            localExpression = localtion.split(',')[1]\n            # print(selector_by,localExpression)\n            if not seconds:\n                seconds =5\n            if selector_by=='x' or selector_by== 'xpath':\n                localType='xpath'\n            elif selector_by=='i' or selector_by== 'id':\n                localType='id'\n            elif selector_by=='n' or selector_by== 'name':\n                localType='name'\n            elif selector_by=='t' or selector_by== 'tag name':\n                localType='tag name'\n            elif selector_by == \"l\" or selector_by == 'link':\n                localType = 'link text'\n            elif selector_by == \"p\" or selector_by == 'partial_link_text':\n                localType = 'partial link text'\n            elif selector_by == \"c\" or selector_by == 'css_selector':\n                localType='css selector'\n            elif selector_by == \"c\" or selector_by == 'class_name':\n                localType = 'class selector'\n            else:\n                raise NameError(\"Please enter a valid type of targeting elements.\")\n        try:\n            ele = WebDriverWait(get_selenium(), seconds).until(\n>           lambda x: x.find_element(by=localType, value=localExpression))\n\n..\\untils\\find.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"2feba8db5218979676d4e525347e7669\")>\nmethod = <function getElement.<locals>.<lambda> at 0x0000000004C4FD08>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n>               value = method(self._driver)\n\nc:\\python36\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nx = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2feba8db5218979676d4e525347e7669\")>\n\n>   lambda x: x.find_element(by=localType, value=localExpression))\n\n..\\untils\\find.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2feba8db5218979676d4e525347e7669\")>\nby = 'id', value = 'userName'\n\n    def find_element(self, by=By.ID, value=None):\n        \"\"\"\n        'Private' method used by the find_element_by_* methods.\n    \n        :Usage:\n            Use the corresponding find_element_by_* instead of this.\n    \n        :rtype: WebElement\n        \"\"\"\n        if self.w3c:\n            if by == By.ID:\n                by = By.CSS_SELECTOR\n                value = '[id=\"%s\"]' % value\n            elif by == By.TAG_NAME:\n                by = By.CSS_SELECTOR\n            elif by == By.CLASS_NAME:\n                by = By.CSS_SELECTOR\n                value = \".%s\" % value\n            elif by == By.NAME:\n                by = By.CSS_SELECTOR\n                value = '[name=\"%s\"]' % value\n        return self.execute(Command.FIND_ELEMENT, {\n            'using': by,\n>           'value': value})['value']\n\nc:\\python36\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:784: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2feba8db5218979676d4e525347e7669\")>\ndriver_command = 'findElement'\nparams = {'sessionId': '2feba8db5218979676d4e525347e7669', 'using': 'id', 'value': 'userName'}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nc:\\python36\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:249: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000000002FF2EF0>\nresponse = {'sessionId': '2feba8db5218979676d4e525347e7669', 'status': 23, 'value': {'message': 'no such window: target window al...\\n  (Session info: chrome=48.0.2564.82)\\n  (Driver info: chromedriver=2.9.248315,platform=Windows NT 6.1 SP1 x86_64)'}}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            try:\n                                message = message['message']\n                            except TypeError:\n                                message = None\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException and 'alert' in value:\n            raise exception_class(message, screen, stacktrace, value['alert'].get('text'))\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=48.0.2564.82)\nE         (Driver info: chromedriver=2.9.248315,platform=Windows NT 6.1 SP1 x86_64)\n\nc:\\python36\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:193: NoSuchWindowException\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.fixture(scope=\"function\")\n    def setup_module():\n        helper.open_browser('chrome')\n        helper.open_url()\n>       login.login()\n\n..\\test_script\\workbenck\\conftest.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nlogin.py:18: in login\n    PageAction.input_string(read_file.get_option('login','userName'),content=userName)\n..\\untils\\PageAction.py:48: in input_string\n    raise e\n..\\untils\\PageAction.py:44: in input_string\n    ele_object=find.getElement(localtion)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nlocaltion = 'id,userName', seconds = 5\n\n    def getElement(localtion,seconds=None):\n        time.sleep(1)\n        if isinstance(localtion,str) and ',' in localtion:\n            selector_by = localtion.split(',')[0]\n            localExpression = localtion.split(',')[1]\n            # print(selector_by,localExpression)\n            if not seconds:\n                seconds =5\n            if selector_by=='x' or selector_by== 'xpath':\n                localType='xpath'\n            elif selector_by=='i' or selector_by== 'id':\n                localType='id'\n            elif selector_by=='n' or selector_by== 'name':\n                localType='name'\n            elif selector_by=='t' or selector_by== 'tag name':\n                localType='tag name'\n            elif selector_by == \"l\" or selector_by == 'link':\n                localType = 'link text'\n            elif selector_by == \"p\" or selector_by == 'partial_link_text':\n                localType = 'partial link text'\n            elif selector_by == \"c\" or selector_by == 'css_selector':\n                localType='css selector'\n            elif selector_by == \"c\" or selector_by == 'class_name':\n                localType = 'class selector'\n            else:\n                raise NameError(\"Please enter a valid type of targeting elements.\")\n        try:\n            ele = WebDriverWait(get_selenium(), seconds).until(\n            lambda x: x.find_element(by=localType, value=localExpression))\n            return ele\n        except Exception as e:\n>           raise PageAction.JYHException(\"找不到元素\")\nE           untils.PageAction.JYHException: 找不到元素\n\n..\\untils\\find.py:56: JYHException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "host",
    "value" : "QH-20151025JPNA"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "severity",
    "value" : "normal"
  }, {
    "name" : "story",
    "value" : "Balance_payment"
  }, {
    "name" : "thread",
    "value" : "17904-MainThread"
  }, {
    "name" : "suite",
    "value" : "workbenck"
  }, {
    "name" : "testClass",
    "value" : "workbenck"
  }, {
    "name" : "testMethod",
    "value" : "test_Insufficient_balance_payment.test_Insufficient_balance_payment"
  }, {
    "name" : "package",
    "value" : "workbenck"
  }, {
    "name" : "resultFormat",
    "value" : "allure1"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "20bb883cddfd73c7.json",
  "parameterValues" : [ ]
}